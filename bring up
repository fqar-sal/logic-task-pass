import sys
import logging
import re  # Import the regular expression module
from functools import partial
from PyQt6.QtCore import QThread, pyqtSignal, QTimer, QPropertyAnimation
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QComboBox, QPushButton,
    QLabel, QLineEdit, QTableWidget, QTableWidgetItem, QHeaderView, QCheckBox,
    QGroupBox, QTabWidget, QGraphicsOpacityEffect
)
from PyQt6.QtGui import QColor, QPalette, QBrush
from netmiko import ConnectHandler

# ------------------------------------------------------------------------
# LOGGING CONFIGURATION
# ------------------------------------------------------------------------
logging.basicConfig(
    filename='network_manager.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class NetmikoThread(QThread):
    """
    QThread used to avoid blocking the GUI while sending commands to the device.
    """
    output_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str)

    def __init__(self, host, username, password, commands, config_mode=False):
        super().__init__()
        self.host = host
        self.username = username
        self.password = password
        self.commands = commands
        self.config_mode = config_mode

    def run(self):
        try:
            connection = self.connect_to_device()
            output = self.send_commands(connection)
            connection.disconnect()  # Cleanly close connection
            self.output_signal.emit(output)
        except Exception as e:
            self.error_signal.emit(str(e))

    def connect_to_device(self):
        """
        Establish a Netmiko SSH connection to the device with optional enable/config mode.
        Return an active connection or raise an exception if it fails.
        """
        try:
            device_params = {
                'device_type': 'cisco_ios',
                'ip': self.host,
                'username': self.username,
                'password': self.password,
                'timeout': 10,
                'banner_timeout': 15,
                'conn_timeout': 15,
                'auth_timeout': 5
            }
            connection = ConnectHandler(**device_params)
            if self.config_mode:
                connection.enable()
            return connection
        except Exception as e:
            logging.error(f"Failed to connect to device {self.host}: {e}")
            raise

    def send_commands(self, connection):
        """
        Send commands to the device in either config or exec mode.
        To avoid hanging issues (especially with 'no shutdown' commands),
        we disable command verification by setting cmd_verify=False.
        Return the combined output string from all commands.
        """
        output = ""
        try:
            if self.config_mode:
                # cmd_verify=False avoids checking echoed commands which sometimes causes hangs.
                output += connection.send_config_set(
                    self.commands,
                    enter_config_mode=True,
                    exit_config_mode=True,
                    cmd_verify=False,
                    delay_factor=1
                )
            else:
                for cmd in self.commands:
                    output += connection.send_command(cmd, delay_factor=1)
                    output += "\n"
        except Exception as e:
            logging.error(f"Error sending commands {self.commands}: {e}")
            raise
        return output

class CiscoInterfaceControl(QWidget):
    """
    Main PyQt application window controlling Cisco interfaces via Netmiko.
    """
    def __init__(self):
        super().__init__()
        self.dark_mode_enabled = False
        self.threads = []  # Store threads to prevent garbage collection

        # Data structures for storing interface info
        self.interface_status = {}
        self.interface_switchport = {}
        self.interface_description = {}
        self.vlan_info = {}
        self.protocol_info = {}  # To store protocol details from "show ip interface brief"

        self.initUI()

    def initUI(self):
        """
        Sets up the PyQt UI with tabs.
        """
        self.setWindowTitle('Cisco Interface & VLAN Control')
        self.setGeometry(100, 100, 1200, 900)

        mainLayout = QVBoxLayout()

        # Top credentials and control buttons layout
        controlLayout = QHBoxLayout()
        self.hostInput = QLineEdit(self)
        self.hostInput.setPlaceholderText('Enter Switch IP')
        controlLayout.addWidget(self.hostInput)

        self.usernameInput = QLineEdit(self)
        self.usernameInput.setPlaceholderText('Enter Username')
        controlLayout.addWidget(self.usernameInput)

        self.passwordInput = QLineEdit(self)
        self.passwordInput.setPlaceholderText('Enter Password')
        self.passwordInput.setEchoMode(QLineEdit.EchoMode.Password)
        controlLayout.addWidget(self.passwordInput)

        self.fetchButton = QPushButton('Fetch Interfaces', self)
        self.fetchButton.clicked.connect(self.fetch_interfaces)
        controlLayout.addWidget(self.fetchButton)

        self.refreshButton = QPushButton('Refresh Interfaces', self)
        self.refreshButton.clicked.connect(self.fetch_interfaces)
        controlLayout.addWidget(self.refreshButton)

        self.darkModeButton = QPushButton('Toggle Dark Mode', self)
        self.darkModeButton.clicked.connect(self.toggle_dark_mode)
        controlLayout.addWidget(self.darkModeButton)
        mainLayout.addLayout(controlLayout)

        # Create the tab widget
        self.tabs = QTabWidget(self)

        # Create the Interfaces tab
        self.interfaceTab = QWidget()
        intLayout = QVBoxLayout()

        # Interface Table with 7 columns (includes combined Toggle button)
        self.interfaceTable = QTableWidget(self)
        self.interfaceTable.setColumnCount(7)
        self.interfaceTable.setHorizontalHeaderLabels([
            'Select', 'Interface', 'Description', 'Mode', 'VLAN', 'Status', 'Toggle'
        ])
        self.interfaceTable.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        self.interfaceTable.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        intLayout.addWidget(self.interfaceTable)

        # Bulk operations group
        bulkGroup = QGroupBox("Bulk Operations")
        bulkLayout = QHBoxLayout()
        self.bulkVlanInput = QLineEdit(self)
        self.bulkVlanInput.setPlaceholderText('Enter VLAN ID for Bulk Operation')
        bulkLayout.addWidget(self.bulkVlanInput)

        self.bulkVlanButton = QPushButton('Bulk Change VLAN', self)
        self.bulkVlanButton.clicked.connect(self.bulk_change_vlan)
        bulkLayout.addWidget(self.bulkVlanButton)

        self.bulkModeCombo = QComboBox(self)
        self.bulkModeCombo.addItems(['Access', 'Trunk'])
        bulkLayout.addWidget(QLabel('Bulk Set Mode:'))
        bulkLayout.addWidget(self.bulkModeCombo)

        self.bulkModeButton = QPushButton('Bulk Set Mode', self)
        self.bulkModeButton.clicked.connect(self.bulk_set_mode)
        bulkLayout.addWidget(self.bulkModeButton)
        bulkGroup.setLayout(bulkLayout)
        intLayout.addWidget(bulkGroup)

        # Change description group
        descGroup = QGroupBox("Change Description")
        descLayout = QHBoxLayout()
        self.descInput = QLineEdit(self)
        self.descInput.setPlaceholderText('Enter Description')
        descLayout.addWidget(self.descInput)

        self.descButton = QPushButton('Change Description', self)
        self.descButton.clicked.connect(self.change_description)
        descLayout.addWidget(self.descButton)
        descGroup.setLayout(descLayout)
        intLayout.addWidget(descGroup)

        # Single interface operations group
        singleGroup = QGroupBox("Single Interface Operations")
        singleLayout = QHBoxLayout()
        self.vlanInput = QLineEdit(self)
        self.vlanInput.setPlaceholderText('Enter VLAN ID for Single Interface')
        singleLayout.addWidget(self.vlanInput)

        self.vlanButton = QPushButton('Set VLAN for Interface', self)
        self.vlanButton.clicked.connect(self.change_vlan)
        singleLayout.addWidget(self.vlanButton)

        self.showConfigButton = QPushButton('Show Running Config', self)
        self.showConfigButton.clicked.connect(self.show_running_config)
        singleLayout.addWidget(self.showConfigButton)
        singleGroup.setLayout(singleLayout)
        intLayout.addWidget(singleGroup)

        # Mode settings group
        modeGroup = QGroupBox("Interface Mode Settings")
        modeLayout = QHBoxLayout()
        self.modeCombo = QComboBox(self)
        self.modeCombo.addItems(['Access', 'Trunk'])
        modeLayout.addWidget(QLabel('Select Mode:'))
        modeLayout.addWidget(self.modeCombo)

        self.modeButton = QPushButton('Set Mode', self)
        self.modeButton.clicked.connect(self.change_mode)
        modeLayout.addWidget(self.modeButton)

        self.allowedVlansInput = QLineEdit(self)
        self.allowedVlansInput.setPlaceholderText('Enter Allowed VLANs (comma-separated)')
        modeLayout.addWidget(self.allowedVlansInput)

        self.allowedVlansButton = QPushButton('Set Allowed VLANs', self)
        self.allowedVlansButton.clicked.connect(self.set_allowed_vlans)
        modeLayout.addWidget(self.allowedVlansButton)
        modeGroup.setLayout(modeLayout)
        intLayout.addWidget(modeGroup)

        self.interfaceTab.setLayout(intLayout)

        # Create the Protocol Status tab
        self.protocolTab = QWidget()
        protLayout = QVBoxLayout()
        self.protocolTable = QTableWidget(self)
        self.protocolTable.setColumnCount(4)
        self.protocolTable.setHorizontalHeaderLabels([
            'Interface', 'IP Address', 'Status', 'Protocol'
        ])
        self.protocolTable.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        protLayout.addWidget(self.protocolTable)
        self.protocolTab.setLayout(protLayout)

        # Add tabs to the QTabWidget
        self.tabs.addTab(self.interfaceTab, "Interfaces")
        self.tabs.addTab(self.protocolTab, "Protocol Status")
        mainLayout.addWidget(self.tabs)

        # Non-blocking notifications
        self.notificationLabel = QLabel('')
        mainLayout.addWidget(self.notificationLabel)

        self.setLayout(mainLayout)
        logging.info('Application initialized with tabs.')

    # --------------------------------------------------------------------
    # MAIN INTERFACE FETCHING AND PARSING
    # --------------------------------------------------------------------
    def fetch_interfaces(self):
        """
        Starts multiple NetmikoThread instances to fetch interface data.
        """
        host, username, password = self.get_credentials()
        if not (host and username and password):
            return

        self.update_notification('Fetching interfaces...')
        logging.info('Fetching interfaces from the switch.')

        commands_handlers = [
            (['show interface status'], self.update_interface_status),
            (['show interface switchport'], self.update_interface_switchport),
            (['show interface description'], self.update_interface_description),
            (['show vlan brief'], self.update_vlan_info),
            (['show ip interface brief'], self.update_protocol_table)
        ]

        for commands, handler in commands_handlers:
            thread = NetmikoThread(host, username, password, commands)
            thread.output_signal.connect(handler)
            thread.error_signal.connect(self.show_error)
            thread.finished.connect(lambda thr=thread: self.threads.remove(thr) if thr in self.threads else None)
            self.threads.append(thread)
            thread.start()

    def update_interface_status(self, output):
        """
        Parse 'show interface status' output.
        """
        self.interface_status = {}
        for line in output.splitlines():
            match = re.match(r'(\S+)\s+([\w-]+)\s+.*?\s+([\w-]+)\s+(.*)', line)
            if match:
                interface, status, vlan, _ = match.groups()
                interface = interface.strip()
                status = status.strip()
                vlan = vlan.strip()
                mode = 'access' if vlan.isdigit() else ('trunk' if vlan.lower() == 'trunk' else 'unknown')
                self.interface_status[interface] = {
                    'status': status,
                    'vlan': vlan,
                    'mode': mode
                }
        self.update_interface_table()

    def update_interface_switchport(self, output):
        """
        Parse 'show interface switchport' output.
        """
        self.interface_switchport = {}
        for line in output.splitlines():
            match = re.match(r'Name:\s+(\S+).*?Switchport Mode:\s+(\S+)', line)
            if match:
                interface = match.group(1).strip()
                mode = match.group(2).strip()
                vlan_match = re.search(r'Access Mode VLAN:.*?(\d+)', line)
                vlan = vlan_match.group(1) if vlan_match else 'N/A'
                if interface:
                    self.interface_switchport[interface] = {
                        'mode': mode,
                        'vlan': vlan
                    }
        self.update_interface_table()

    def update_interface_description(self, output):
        """
        Parse 'show interface description' output.
        """
        self.interface_description = {}
        for line in output.splitlines():
            if re.match(r'Interface\s+Status\s+Protocol\s+Description', line) or re.match(r'---------', line):
                continue
            match = re.match(r'(\S+)\s+.*?administratively down.*?(\S+)', line)
            if match:
                interface = match.group(1).strip()
                description = match.group(2).strip() or "Null"
                self.interface_description[interface] = description
            else:
                match = re.match(r'(\S+)\s+.*?(\S+)', line)
                if match:
                    interface = match.group(1).strip()
                    description = match.group(2).strip() or "Null"
                    self.interface_description[interface] = description
        self.update_interface_table()

    def update_vlan_info(self, output):
        """
        Parse 'show vlan brief' output.
        """
        self.vlan_info = {}
        for line in output.splitlines():
            if re.match(r'VLAN\s+Name\s+Status\s+Ports', line) or re.match(r'----\s+----\s+------\s+-----', line):
                continue
            match = re.match(r'(\d+)\s+\S+\s+\w+\s+(.*)', line)
            if match:
                vlan_id = match.group(1).strip()
                interfaces = [iface.strip() for iface in match.group(2).split(',')]
                for iface in interfaces:
                    if iface not in self.vlan_info:
                        self.vlan_info[iface] = []
                    self.vlan_info[iface].append(vlan_id)
        self.update_interface_table()

    def update_protocol_table(self, output):
        """
        Parse 'show ip interface brief' output.
        """
        self.protocol_info = {}
        lines = output.splitlines()
        header_found = False
        for line in lines:
            if "Interface" in line and "IP-Address" in line:
                header_found = True
                continue
            if not header_found or not line.strip():
                continue
            parts = line.split()
            if len(parts) >= 6:
                interface = parts[0]
                ip_address = parts[1]
                status = parts[-2]
                protocol = parts[-1]
                self.protocol_info[interface] = {
                    'ip': ip_address,
                    'status': status,
                    'protocol': protocol
                }
        self.refresh_protocol_table()

    def update_interface_table(self):
        """
        Update the interface table view.
        """
        if not self.interface_status:
            return

        self.interfaceTable.setRowCount(0)
        for interface, st_info in self.interface_status.items():
            row_position = self.interfaceTable.rowCount()
            self.interfaceTable.insertRow(row_position)

            # Checkbox column
            checkbox = QCheckBox(self)
            self.interfaceTable.setCellWidget(row_position, 0, checkbox)

            self.interfaceTable.setItem(row_position, 1, QTableWidgetItem(interface))
            description = self.interface_description.get(interface, 'Null')
            self.interfaceTable.setItem(row_position, 2, QTableWidgetItem(description))
            mode = st_info.get('mode', 'unknown')
            self.interfaceTable.setItem(row_position, 3, QTableWidgetItem(mode))
            vlan = st_info.get('vlan', 'N/A')
            self.interfaceTable.setItem(row_position, 4, QTableWidgetItem(vlan))
            status = st_info.get('status', 'N/A')
            status_item = QTableWidgetItem(status)
            if status.lower() == 'connected':
                status_item.setBackground(QBrush(QColor(144, 238, 144)))
            else:
                status_item.setBackground(QBrush(QColor(255, 99, 71)))
            self.interfaceTable.setItem(row_position, 5, status_item)

            # Combined Toggle Button with animated fade effect.
            if status.lower() == "connected":
                button_text = "Bring Down"
                button_style = "background-color: red; color: white;"
            else:
                button_text = "Bring Up"
                button_style = "background-color: green; color: white;"
            toggle_button = QPushButton(button_text, self)
            toggle_button.setStyleSheet(button_style)
            toggle_button.clicked.connect(partial(self.toggle_interface, interface))
            self.interfaceTable.setCellWidget(row_position, 6, toggle_button)

    def refresh_protocol_table(self):
        """
        Update the protocol table view.
        """
        self.protocolTable.setRowCount(0)
        for interface, info in self.protocol_info.items():
            row = self.protocolTable.rowCount()
            self.protocolTable.insertRow(row)
            self.protocolTable.setItem(row, 0, QTableWidgetItem(interface))
            self.protocolTable.setItem(row, 1, QTableWidgetItem(info.get('ip', 'N/A')))
            self.protocolTable.setItem(row, 2, QTableWidgetItem(info.get('status', 'N/A')))
            self.protocolTable.setItem(row, 3, QTableWidgetItem(info.get('protocol', 'N/A')))

    # --------------------------------------------------------------------
    # COMMAND METHODS
    # --------------------------------------------------------------------
    def toggle_interface(self, interface):
        """
        Toggle interface status based on current status.
        If the interface is down then send "no shutdown" (Bring Up);
        if the interface is up then send "shutdown" (Bring Down).
        Animate the toggle button corresponding to the interface.
        """
        current_status = self.interface_status.get(interface, {}).get('status', '').lower()
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return

        # Locate the toggle button for animation
        button = None
        for row in range(self.interfaceTable.rowCount()):
            if self.interfaceTable.item(row, 1).text() == interface:
                button = self.interfaceTable.cellWidget(row, 6)
                break
        if button:
            effect = QGraphicsOpacityEffect(button)
            button.setGraphicsEffect(effect)
            anim = QPropertyAnimation(effect, b"opacity")
            anim.setDuration(500)
            anim.setStartValue(0.0)
            anim.setEndValue(1.0)
            anim.start(QPropertyAnimation.DeleteWhenStopped)

        if current_status == "connected":
            commands = [f'interface {interface}', 'shutdown']
            msg = f'Bringing down {interface}...'
        else:
            commands = [f'interface {interface}', 'no shutdown']
            msg = f'Bringing up {interface}...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def change_vlan(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        selected_row = self.interfaceTable.currentRow()
        if selected_row == -1:
            self.update_notification('Please select an interface after fetching.')
            return
        interface = self.interfaceTable.item(selected_row, 1).text()
        vlan_id = self.vlanInput.text().strip()
        if not vlan_id:
            self.update_notification('Please enter a VLAN ID.')
            return
        commands = [f'interface {interface}', f'switchport access vlan {vlan_id}']
        msg = f'Changing VLAN for {interface} to {vlan_id}...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def bulk_change_vlan(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        vlan_id = self.bulkVlanInput.text().strip()
        if not vlan_id:
            self.update_notification('Please enter a VLAN ID for bulk operation.')
            return
        selected_interfaces = self.get_selected_interfaces()
        if not selected_interfaces:
            self.update_notification('No interfaces selected for bulk operation.')
            return
        commands = []
        for iface in selected_interfaces:
            commands.append(f'interface {iface}')
            commands.append(f'switchport access vlan {vlan_id}')
        msg = f'Bulk changing VLAN to {vlan_id} for selected interfaces...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def change_description(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        selected_row = self.interfaceTable.currentRow()
        if selected_row == -1:
            self.update_notification('Please select an interface after fetching.')
            return
        interface = self.interfaceTable.item(selected_row, 1).text()
        description = self.descInput.text().strip() or "Null"
        commands = [f'interface {interface}', f'description {description}']
        msg = f'Changing description for {interface}...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def bulk_set_mode(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        mode = self.bulkModeCombo.currentText().lower()
        selected_interfaces = self.get_selected_interfaces()
        if not selected_interfaces:
            self.update_notification('No interfaces selected for bulk operation.')
            return
        commands = []
        for iface in selected_interfaces:
            commands.append(f'interface {iface}')
            if mode == 'trunk':
                commands.append('switchport trunk encapsulation dot1q')
            commands.append(f'switchport mode {mode}')
        msg = f'Bulk setting mode to {mode} for selected interfaces...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def change_mode(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        selected_row = self.interfaceTable.currentRow()
        if selected_row == -1:
            self.update_notification('Please select an interface after fetching.')
            return
        interface = self.interfaceTable.item(selected_row, 1).text()
        mode = self.modeCombo.currentText().lower()
        commands = [f'interface {interface}']
        if mode == 'trunk':
            commands.append('switchport trunk encapsulation dot1q')
        commands.append(f'switchport mode {mode}')
        msg = f'Changing mode for {interface} to {mode}...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def set_allowed_vlans(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        selected_row = self.interfaceTable.currentRow()
        if selected_row == -1:
            self.update_notification('Please select an interface after fetching.')
            return
        interface = self.interfaceTable.item(selected_row, 1).text()
        allowed_vlans = self.allowedVlansInput.text().strip()
        if not allowed_vlans:
            self.update_notification('Please enter allowed VLANs.')
            return
        commands = [f'interface {interface}', f'switchport trunk allowed vlan {allowed_vlans}']
        msg = f'Setting allowed VLANs for {interface} to {allowed_vlans}...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, True)

    def show_running_config(self):
        host, user, pwd = self.get_credentials()
        if not (host and user and pwd):
            return
        selected_row = self.interfaceTable.currentRow()
        if selected_row == -1:
            self.update_notification('Please select an interface after fetching.')
            return
        interface = self.interfaceTable.item(selected_row, 1).text()
        commands = [f'show running-config interface {interface}']
        msg = f'Showing running config for {interface}...'
        self.execute_netmiko_commands(host, user, pwd, commands, msg, False)

    # --------------------------------------------------------------------
    # UTILITY METHODS
    # --------------------------------------------------------------------
    def get_credentials(self):
        """
        Retrieve and validate credential fields.
        """
        host = self.hostInput.text().strip()
        user = self.usernameInput.text().strip()
        pwd = self.passwordInput.text().strip()
        if not (host and user and pwd):
            self.update_notification('Ensure IP, username, and password are all filled.')
            return None, None, None
        return host, user, pwd

    def get_selected_interfaces(self):
        """
        Return a list of all checked interfaces from the interface table.
        """
        selected = []
        for row in range(self.interfaceTable.rowCount()):
            checkbox = self.interfaceTable.cellWidget(row, 0)
            if checkbox and checkbox.isChecked():
                iface = self.interfaceTable.item(row, 1).text()
                selected.append(iface)
        return selected

    def execute_netmiko_commands(self, host, user, pwd, commands, msg, config_mode):
        """
        Start a NetmikoThread to execute commands.
        """
        self.update_notification(msg)
        logging.info(msg)
        thread = NetmikoThread(host, user, pwd, commands, config_mode=config_mode)
        thread.output_signal.connect(self.show_success)
        thread.error_signal.connect(self.show_error)
        thread.finished.connect(lambda thr=thread: self.threads.remove(thr) if thr in self.threads else None)
        self.threads.append(thread)
        thread.start()

    def update_notification(self, message):
        """
        Update the non-blocking notification label.
        """
        self.notificationLabel.setText(message)

    def show_success(self, output):
        self.update_notification(f'Operation completed successfully. Output: {output}')
        logging.info(f'Operation completed successfully. Output: {output}')
        QTimer.singleShot(100, self.fetch_interfaces)

    def show_error(self, error):
        self.update_notification(f'Command failed. Error: {error}')
        logging.error(f'Command failed. Error: {error}')

    # --------------------------------------------------------------------
    # TOGGLE DARK MODE
    # --------------------------------------------------------------------
    def toggle_dark_mode(self):
        if not self.dark_mode_enabled:
            dark_palette = QPalette()
            dark_palette.setColor(QPalette.ColorRole.Window, QColor(53, 53, 53))
            dark_palette.setColor(QPalette.ColorRole.WindowText, QColor(255, 255, 255))
            dark_palette.setColor(QPalette.ColorRole.Base, QColor(42, 42, 42))
            dark_palette.setColor(QPalette.ColorRole.AlternateBase, QColor(66, 66, 66))
            dark_palette.setColor(QPalette.ColorRole.ToolTipBase, QColor(255, 255, 255))
            dark_palette.setColor(QPalette.ColorRole.ToolTipText, QColor(255, 255, 255))
            dark_palette.setColor(QPalette.ColorRole.Text, QColor(255, 255, 255))
            dark_palette.setColor(QPalette.ColorRole.Button, QColor(53, 53, 53))
            dark_palette.setColor(QPalette.ColorRole.ButtonText, QColor(255, 255, 255))
            dark_palette.setColor(QPalette.ColorRole.BrightText, QColor(255, 0, 0))
            dark_palette.setColor(QPalette.ColorRole.Link, QColor(42, 130, 218))
            dark_palette.setColor(QPalette.ColorRole.Highlight, QColor(42, 130, 218))
            dark_palette.setColor(QPalette.ColorRole.HighlightedText, QColor(0, 0, 0))
            self.setPalette(dark_palette)
        else:
            light_palette = QPalette()
            self.setPalette(light_palette)
        self.dark_mode_enabled = not self.dark_mode_enabled

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = CiscoInterfaceControl()
    window.show()
    sys.exit(app.exec())
